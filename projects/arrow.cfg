from buildbot.plugins import util

from ursabot.utils import any_of, has
from ursabot.changes import ChangeFilter, GitPoller, GitHubPullrequestPoller
from ursabot.formatters import (MarkdownFormatter, BenchmarkCommentFormatter,
                                CrossbowCommentFormatter)
from ursabot.reporters import (GitHubStatusPush, GitHubReviewPush,
                               GitHubCommentPush, ZulipStatusPush)
from ursabot.schedulers import AnyBranchScheduler, TryScheduler, ForceScheduler
from ursabot.builders import (CrossbowTrigger,
                              ArrowCppTest, ArrowCppCudaTest,
                              ArrowCppBenchmark, ArrowPythonTest,
                              ArrowCppCondaTest, ArrowPythonCondaTest,
                              ArrowPythonCudaTest, ArrowJavaTest,
                              ArrowGoTest, ArrowRustTest, ArrowJSTest,
                              ArrowRTest, ArrowRCondaTest)


################################ POLLERS ####################################
# Git and Pull request pollers are required only if no hooks are defined

arrow_pollers = []

if conf.arrow.poller.enabled:
    arrow_pollers.extend([
        GitPoller(
            project=conf.arrow.name,
            repourl=conf.arrow.repo,
            branch='master',
            pollInterval=180
        ),
        GitHubPullrequestPoller(
            project=conf.arrow.name,
            branches=['master'],
            pollInterval=180,
            magic_link=True,
            token=util.Interpolate(conf.arrow.poller.token)
        )
    ])


################################ BUILDERS #####################################
# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which workers can execute them.  Note that any
# particular build will only take place on one worker.

crossbow_builders = CrossbowTrigger.builders_for(
    workers.filter(arch='amd64'),
    env={
        'GIT_COMMITTER_NAME': 'ursabot',
        'GIT_COMMITTER_EMAIL': 'ursabot@ci.ursalabs.org'
    }
)

cuda_enabled_workers = workers.filter(tags=has('cuda'))

arrow_tests = (
    ArrowCppTest.builders_for(workers) +
    ArrowRTest.builders_for(workers) +
    ArrowPythonTest.builders_for(workers) +
    ArrowCppCondaTest.builders_for(workers) +
    ArrowRCondaTest.builders_for(workers) +
    ArrowPythonCondaTest.builders_for(workers) +
    ArrowCppCudaTest.builders_for(cuda_enabled_workers) +
    ArrowPythonCudaTest.builders_for(cuda_enabled_workers) +
    ArrowJavaTest.builders_for(workers) +
    ArrowRustTest.builders_for(workers) +
    ArrowGoTest.builders_for(workers) +
    ArrowJSTest.builders_for(workers)
)

arrow_benchmarks = (
    ArrowCppBenchmark.builders_for(workers)
)

arrow_builders = (
    arrow_tests +
    arrow_benchmarks
)

print('Enabled builders:')
for builder in arrow_builders + arrow_benchmarks:
    print(f' - {builder}')




################################ SCHEDULERS ###################################
# Configure the Schedulers, which decide how to react to incoming changes.


arrow_schedulers = [
    AnyBranchScheduler(
        name='Arrow',
        change_filter=ChangeFilter(
            project=conf.arrow.name,
            # see docstring of ursabot.hooks.GithubHook
            category=any_of(None, 'tag', 'pull'),
        ),
        treeStableTimer=None,
        builders=arrow_tests
    ),
    AnyBranchScheduler(
        name='ArrowBuild',
        change_filter=ChangeFilter(
            project=conf.arrow.name,
            category='comment',
            properties={'command': 'build'}
        ),
        treeStableTimer=None,
        builders=arrow_tests
    ),
    AnyBranchScheduler(
        name='ArrowBenchmark',
        change_filter=ChangeFilter(
            # ensure that benchmarks are not triggered on every commit of every
            # pull request, see docstring of ursabot.hooks.GithubHook
            project=conf.arrow.name,
            category='comment',
            properties={'command': 'benchmark'}
        ),
        treeStableTimer=None,
        builders=arrow_benchmarks
    ),
    AnyBranchScheduler(
        name='CrossbowTrigger',
        change_filter=ChangeFilter(
            # ensure that benchmarks are not triggered on every commit of every
            # pull request, see docstring of ursabot.hooks.GithubHook
            project=conf.arrow.name,
            category='comment',
            properties={'command': 'crossbow'}
        ),
        treeStableTimer=None,
        builders=crossbow_builders
    ),
    # TODO(kszucs): specialize force scheduler, for example let the user
    # pass crossbow args for the crossbow-force scheduler
    ForceScheduler(
        name='ArrowForce',
        project=conf.arrow.name,
        repository=conf.arrow.repo,
        builders=arrow_builders + crossbow_builders
    ),
    TryScheduler(
        name='ArrowTry',
        port=conf.arrow.schedulers['try'].port,
        userpass=conf.arrow.schedulers['try'].userpass,
        builders=arrow_builders + crossbow_builders
    )
]



################################ REPORTERS ####################################
# There are multiple ways to present build status to various places e.g.
# to github as status push, reviews and/or comments.


arrow_reporters = []

if conf.arrow.reporters.github_status.enabled:
    arrow_reporters.append(
        GitHubStatusPush(
            name='ArrowStatusPush',
            tokens=[
                util.Interpolate(token) for token in
                conf.arrow.reporters.github_status.tokens
            ],
            context=util.Interpolate('%(prop:buildername)s'),
            builders=arrow_builders,
            debug=False,
            verbose=True,
            verify=True
        )
    )

if conf.arrow.reporters.github_review.enabled:
    arrow_reporters.append(
        GitHubReviewPush(
            name='ArrowReviewPush',
            tokens=[
                util.Interpolate(token) for token in
                conf.arrow.reporters.github_review.tokens
            ],
            context=util.Interpolate('%(prop:buildername)s'),
            builders=arrow_builders,
            dont_report_on={'started'},
            debug=False,
            verbose=True,
            verify=True
        )
    )

if conf.arrow.reporters.github_comment.enabled:
    arrow_reporters.extend([
        GitHubCommentPush(
            name='BenchmarkCommentPush',
            tokens=[
                util.Interpolate(token) for token in
                conf.arrow.reporters.github_comment.tokens
            ],
            formatter=BenchmarkCommentFormatter(),
            builders=arrow_benchmarks,
            report_on={'failure', 'exception', 'cancelled', 'success'},
            debug=False,
            verbose=True,
            verify=True
        ),
        GitHubCommentPush(
            name='CrossbowCommentPush',
            tokens=[
                util.Interpolate(token) for token in
                conf.arrow.reporters.github_comment.tokens
            ],
            formatter=CrossbowCommentFormatter(
                crossbow_repo='ursa-labs/crossbow',
            ),
            builders=crossbow_builders,
            report_on={'failure', 'exception', 'cancelled', 'success'},
            debug=False,
            verbose=True,
            verify=True
        )
    ])

if conf.arrow.reporters.zulip_status.enabled:
    arrow_reporters.append(
        ZulipStatusPush(
            organization=conf.arrow.reporters.zulip_status.organization,
            bot=conf.arrow.reporters.zulip_status.bot,
            apikey=conf.arrow.reporters.zulip_status.apikey,
            stream=conf.arrow.reporters.zulip_status.stream,
            formatter=MarkdownFormatter(),
            builders=arrow_builders + crossbow_builders,
            report_on={'failure', 'exception', 'cancelled'},
            debug=False,
            verbose=True,
            verify=True
        )
    )


################################ ADD PROJECTS #################################

if conf.arrow.enabled:
    c['change_source'].extend(arrow_pollers)
    c['builders'].extend(arrow_builders + crossbow_builders)
    c['schedulers'].extend(arrow_schedulers)
    c['services'].extend(arrow_reporters)
