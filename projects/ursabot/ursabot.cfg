import os
import pathlib

import toolz
from buildbot.plugins import util, changes

from ursabot.hooks import UrsabotHook
from ursabot.utils import Config, Collection, any_of, has
from ursabot.changes import ChangeFilter, GitPoller, GitHubPullrequestPoller
from ursabot.workers import DockerLatentWorker
from ursabot.secrets import SecretInPass
from ursabot.formatters import (MarkdownFormatter, BenchmarkCommentFormatter,
                                CrossbowCommentFormatter)
from ursabot.reporters import (GitHubStatusPush, GitHubReviewPush,
                               GitHubCommentPush, ZulipStatusPush)
from ursabot.schedulers import AnyBranchScheduler, TryScheduler, ForceScheduler
from ursabot.builders import (UrsabotTest, CrossbowTrigger,
                              ArrowCppTest, ArrowCppCudaTest,
                              ArrowCppBenchmark, ArrowPythonTest,
                              ArrowCppCondaTest, ArrowPythonCondaTest,
                              ArrowPythonCudaTest, ArrowJavaTest,
                              ArrowGoTest, ArrowRustTest, ArrowJSTest,
                              ArrowRTest, ArrowRCondaTest)

ursabot_pollers = []

if conf.ursabot.poller.enabled:
    ursabot_pollers.extend([
        GitPoller(
            project=conf.ursabot.name,
            repourl=conf.ursabot.repo,
            branch='master',
            pollInterval=180
        ),
        GitHubPullrequestPoller(
            project=conf.ursabot.name,
            branches=['master'],
            pollInterval=180,
            magic_link=True,
            token=util.Interpolate(conf.ursabot.poller.token)
        )
    ])


ursabot_builders = UrsabotTest.builders_for(
    workers.filter(arch='amd64')
)



ursabot_schedulers = [
    AnyBranchScheduler(
        name='Ursabot',
        change_filter=ChangeFilter(
            project=conf.ursabot.name,
        ),
        treeStableTimer=None,
        builders=ursabot_builders
    ),
    ForceScheduler(
        name='UrsabotForce',
        project=conf.ursabot.name,
        repository=conf.ursabot.repo,
        builders=ursabot_builders
    ),
    TryScheduler(
        name='UrsabotTry',
        port=conf.ursabot.schedulers['try'].port,
        userpass=conf.ursabot.schedulers['try'].userpass,
        builders=ursabot_builders
    )
]

ursabot_reporters = []


if conf.ursabot.reporters.github_status.enabled:
    ursabot_reporters.append(
        GitHubStatusPush(
            name='UrsabotStatusPush',
            tokens=[
                util.Interpolate(token) for token in
                conf.ursabot.reporters.github_status.tokens
            ],
            context=util.Interpolate('%(prop:buildername)s'),
            builders=ursabot_builders,
            debug=False,
            verbose=True,
            verify=True
        )
    )


if conf.ursabot.enabled:
    c['change_source'].extend(ursabot_pollers)
    c['builders'].extend(ursabot_builders)
    c['schedulers'].extend(ursabot_schedulers)
    c['services'].extend(ursabot_reporters)
