# -*- python -*-
# ex: set filetype=python:

# Copyright 2019 RStudio, Inc.
# All rights reserved.
#
# Use of this source code is governed by a BSD 2-Clause
# license that can be found in the LICENSE_BSD file.
import os
from pathlib import Path

from buildbot.plugins import util
from ursabot.builders import DockerBuilder
from ursabot.changes import ChangeFilter, GitPoller, GitHubPullrequestPoller
from ursabot.configs import ProjectConfig, MasterConfig
from ursabot.docker import DockerImage, ADD, RUN, pip, worker_image_for
from ursabot.reporters import GitHubStatusPush
from ursabot.schedulers import AnyBranchScheduler, ForceScheduler
from ursabot.secrets import SecretInPass
from ursabot.steps import ShellCommand, PyTest, Pip, GitHub
from ursabot.utils import Collection, Config
from ursabot.workers import DockerLatentWorker


########################### LOAD STATIC CONFIG ################################
# Read ursabot configuration from .toml files, export URSABOT_ENV='test' to use
# test environment. These configurations are merged upon each other, the
# merging order is default.toml <- $env.toml <- local.toml <-.secrets.toml
# The schema of the configuration files are flexible. `conf` is only used by
# this master.cfg file, so it can be freely changed.
# For more see https://github.com/ursa-labs/ursabot#configuring-ursabot

env = os.environ.get('URSABOT_ENV', 'test')
cwd = Path(__file__).parent
conf = Config.load(
    cwd / 'default.yaml',
    cwd / f'{env}.yaml',
    optionals=[
        cwd / 'local.yaml',
        cwd / '.secrets.yaml'
    ]
)

################################ WORKERS ######################################
# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password. The same
# worker name and password must be configured on the worker.

workers = Collection([
    DockerLatentWorker(
        f'{w.name}-docker',
        password=None,  # auto generated
        arch=w.arch,
        tags=w.get('tags', []),
        max_builds=w.get('max_builds', 1),
        properties={'ncpus': w.get('ncpus')},
        autopull=True,
        alwaysPull=True,
        docker_host=w.docker.host,
        masterFQDN=w.docker.get('masterFQDN'),
        volumes=w.docker.get('volumes', []),
        hostconfig=w.docker.get('hostconfig', {}),
        missing_timeout=w.docker.get('missing_timeout', 120)
    )
    for w in conf.ursabot.workers
])

############################## DOCKER IMAGES ##################################
# There is a small docker utility in ursabot.docker module to define
# hierachical images. It uses a DSL implemented in python instead of plain
# Dockerfiles. Additionally it plays nicely with the DockerLatentWorker and
# the DockerBuilder abstractions. The DockerBuilder can specify which
# DockerImage(s) it requires to run the build(s).
# For more see https://github.com/ursa-labs/ursabot#define-docker-images

docker_assets = Path(__file__).parent.parent / 'docker'
ursabot_image = DockerImage(
    name='ursabot',
    base='python:3.7',
    arch='amd64',
    os='debian-9',
    org='ursalab',
    title='Ursabot Python 3.7',
    steps=[
        ADD(docker_assets / 'requirements-ursabot.txt'),
        RUN(pip(files=['requirements-ursabot.txt']))
    ]
)
worker_image = worker_image_for(ursabot_image)
images = [ursabot_image, worker_image]

################################ BUILDERS #####################################
# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which workers can execute them.  Note that any
# particular build will only take place on one worker.


class UrsabotTest(DockerBuilder):
    tags = ['ursabot']
    steps = [
        GitHub(
            name='Clone Ursabot',
            repourl=util.Property('repository'),
            mode='full'
        ),
        Pip(['install', '-e', '.']),
        PyTest(args=['-m', 'not docker', 'ursabot']),
        ShellCommand(
            command=['flake8', 'ursabot'],
            name='Flake8'
        ),
        ShellCommand(
            command=['buildbot', 'checkconfig', '.'],
            env={'URSABOT_ENV': 'test'},
            name='Checkconfig'
        )
    ]
    images = [worker_image]


builders = UrsabotTest.builders_for(workers)

################################ SCHEDULERS ###################################
# Configure the Schedulers, which decide how to react to incoming changes.
# For more see http://docs.buildbot.net/latest/full.html#scheduling-builds

schedulers = [
    AnyBranchScheduler(
        name='Ursabot',
        change_filter=ChangeFilter(
            project=conf.ursabot.name
        ),
        treeStableTimer=None,
        builders=builders
    ),
    ForceScheduler(
        name='UrsabotForce',
        project=conf.ursabot.name,
        repository=conf.ursabot.repo,
        builders=builders
    )
]

################################ REPORTERS ####################################
# There are multiple ways to present build status to various places e.g.
# to github as status push, reviews and/or comments.

reporters = []
if conf.ursabot.reporters.github_status.enabled:
    reporters.append(
        GitHubStatusPush(
            name='UrsabotStatusPush',
            tokens=[
                util.Interpolate(token) for token in
                conf.ursabot.reporters.github_status.tokens
            ],
            context=util.Interpolate('%(prop:buildername)s'),
            builders=builders,
            debug=False,
            verbose=True,
            verify=True
        )
    )


################################## POLLERS ####################################
# Git and Pull request pollers are required only if no hooks are specified.

pollers = []
if conf.ursabot.poller.enabled:
    pollers.extend([
        GitPoller(
            project=conf.ursabot.name,
            repourl=conf.ursabot.repo,
            branch='master',
            pollInterval=180
        ),
        GitHubPullrequestPoller(
            project=conf.ursabot.name,
            branches=['master'],
            pollInterval=180,
            magic_link=True,
            token=util.Interpolate(conf.ursabot.poller.token)
        )
    ])

################################ PROJECT CONFIG ###############################
# ProjectConfig is a thin layer around the project specific components.
# It lets other buildmaster configurations to reuse existing configurations,
# and it also makes possible to maintain the project relevant buildbot code
# in the project's own codebase.

ursabot = ProjectConfig(
    # pass images
    name=conf.ursabot.name,
    images=images,
    workers=workers,
    builders=builders,
    schedulers=schedulers,
    reporters=reporters
)

############################# BUILDMASTER CONFIG ##############################
# `BuildmasterConfig` isthe dictionary that the buildbot buildmaster pays
# attention to.
# - `buildbot checkconfig master.cfg` loads and validates it without actually
#   running the services
# - `buildbot start|stop|restart .` also loads this dictionary, indirectly
#   through buildbot.tac

secret_providers = []
if conf.secrets.enabled:
    secret_providers.append(
        SecretInPass(
            # passphrase should be set either in local.yaml or .secrets.yaml
            # without the interpolate syntax
            passphrase=conf.secrets.get('passphrase'),
            dirname=Path(conf.secrets.directory).expanduser()
        )
    )

BuildmasterConfig = MasterConfig(
    title=conf.title,
    url=conf.url,
    webui_port=conf.webui_port,
    worker_port=conf.worker_port,
    database_url=conf.database_url,
    secret_providers=secret_providers,
    projects=[
        ursabot
    ]
)
