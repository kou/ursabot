# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import util

from ursabot.utils import any_of, has, Collection
from ursabot.changes import ChangeFilter
from ursabot.formatters import (BenchmarkCommentFormatter,
                                CrossbowCommentFormatter)
from ursabot.reporters import GitHubStatusPush, GitHubCommentPush
from ursabot.schedulers import AnyBranchScheduler, ForceScheduler
from ursabot.workers import DockerLatentWorker
from ursabot.configs import ProjectConfig, MasterConfig
from arrow.builders import (CrossbowTrigger, CppTest, CppCudaTest,
                            CppBenchmark, PythonTest, CppCondaTest,
                            PythonCondaTest, PythonCudaTest, JavaTest,
                            GoTest, RustTest, JSTest, RTest, RCondaTest)

name = 'apache/arrow'
repo = 'https://github.com/apache/arrow'

################################ WORKERS ######################################
# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password. The same
# worker name and password must be configured on the worker.

workers = Collection([
    DockerLatentWorker(
        'local-docker',
        arch='amd64',
        docker_host='unix://var/run/docker.sock',
        masterFQDN='host.docker.internal',  # only required for OSX
    ),
    # DockerLatentWorker(
    #     'local-cuda-docker',
    #     tags=['cuda'],
    #     arch='amd64',
    #     docker_host='unix://var/run/docker.sock',
    #     masterFQDN='host.docker.internal',  # only required for OSX
    # )
    # DockerLatentWorker(
    #     'local-arm-docker',
    #     tags=['cuda'],
    #     arch='arm64v8',
    #     docker_host='unix://var/run/docker.sock',
    #     masterFQDN='host.docker.internal',  # only required for OSX
    # )
])

cuda_enabled_workers = workers.filter(tags=has('cuda'))

################################ POLLERS ####################################
# Git and Pull request pollers are required only if no hooks are defined
#
# Pollers should be set up if the change hooks are not configured for the
# arrow repository.
#
# pollers = [
#     GitPoller(
#         project=name,
#         repourl=repo,
#         branch='master',
#         pollInterval=180
#     ),
#     GitHubPullrequestPoller(
#         project=name,
#         branches=['master'],
#         pollInterval=180,
#         magic_link=True,
#         token=util.Interpolate('%(secret:ursabot/github_token)s')
#     )
# ]

################################ BUILDERS #####################################
# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which workers can execute them.  Note that any
# particular build will only take place on one worker.

arrow_benchmarks = CppBenchmark.builders_for(workers)
arrow_tests = (
    CppTest.builders_for(workers) +
    RTest.builders_for(workers) +
    PythonTest.builders_for(workers) +
    CppCondaTest.builders_for(workers) +
    RCondaTest.builders_for(workers) +
    PythonCondaTest.builders_for(workers) +
    CppCudaTest.builders_for(cuda_enabled_workers) +
    PythonCudaTest.builders_for(cuda_enabled_workers) +
    JavaTest.builders_for(workers) +
    RustTest.builders_for(workers) +
    GoTest.builders_for(workers) +
    JSTest.builders_for(workers)
)

arrow_builders = arrow_tests + arrow_benchmarks
crossbow_builders = CrossbowTrigger.builders_for(workers)
all_builders = arrow_builders + crossbow_builders

print('Enabled builders:')
for builder in arrow_builders + arrow_benchmarks:
    print(f' - {builder}')

################################ SCHEDULERS ###################################
# Configure the Schedulers, which decide how to react to incoming changes.

schedulers = [
    AnyBranchScheduler(
        name='Arrow',
        change_filter=ChangeFilter(
            project=name,
            # see docstring of ursabot.hooks.GithubHook
            category=any_of(None, 'tag', 'pull'),
        ),
        treeStableTimer=None,
        builders=arrow_tests
    ),
    AnyBranchScheduler(
        name='ArrowBuild',
        change_filter=ChangeFilter(
            project=name,
            category='comment',
            properties={'command': 'build'}
        ),
        treeStableTimer=None,
        builders=arrow_tests
    ),
    AnyBranchScheduler(
        name='ArrowBenchmark',
        change_filter=ChangeFilter(
            # ensure that benchmarks are not triggered on every commit of every
            # pull request, see docstring of ursabot.hooks.GithubHook
            project=name,
            category='comment',
            properties={'command': 'benchmark'}
        ),
        treeStableTimer=None,
        builders=arrow_benchmarks
    ),
    AnyBranchScheduler(
        name='CrossbowTrigger',
        change_filter=ChangeFilter(
            # ensure that benchmarks are not triggered on every commit of every
            # pull request, see docstring of ursabot.hooks.GithubHook
            project=name,
            category='comment',
            properties={'command': 'crossbow'}
        ),
        treeStableTimer=None,
        builders=crossbow_builders
    ),
    # TODO(kszucs): specialize force scheduler, for example let the user
    # pass crossbow args for the crossbow-force scheduler
    ForceScheduler(
        name='ArrowForce',
        project=name,
        repository=repo,
        builders=all_builders
    )
]

################################ REPORTERS ####################################
# There are multiple ways to present build status to various places e.g.
# to github as status push, reviews and/or comments.

reporters = [
    GitHubStatusPush(
        name='ArrowStatusPush',
        tokens=[
            util.Interpolate('%(secret:kszucs/github_status_token)s'),
            util.Interpolate('%(secret:pitrou/github_status_token)s')
        ],
        context=util.Interpolate('%(prop:buildername)s'),
        builders=arrow_builders,
        debug=False,
        verbose=True,
        verify=True
    ),
    GitHubCommentPush(
        name='BenchmarkCommentPush',
        tokens=[
            util.Interpolate('%(secret:ursabot/github_token)s')
        ],
        formatter=BenchmarkCommentFormatter(),
        builders=arrow_benchmarks,
        report_on={'failure', 'exception', 'cancelled', 'success'},
        debug=False,
        verbose=True,
        verify=True
    ),
    GitHubCommentPush(
        name='CrossbowCommentPush',
        tokens=[
            util.Interpolate('%(secret:ursabot/github_token)s')
        ],
        formatter=CrossbowCommentFormatter(
            crossbow_repo='ursa-labs/crossbow',
        ),
        builders=crossbow_builders,
        report_on={'failure', 'exception', 'cancelled', 'success'},
        debug=False,
        verbose=True,
        verify=True
    )
]

################################ FINALIZE #####################################

production = ProjectConfig(
    # pass images
    name=name,
    workers=workers,
    builders=all_builders,
    schedulers=schedulers
)

# in practice this configuration not used, the production project configuration
# is injected to the one hosted under ci.ursalabs.org
BuildmasterConfig = MasterConfig(
    title='Apache Arrow',
    url='http://arrow.apache.org/ci',
    webui_port=8010,
    worker_port=9989,
    database_url='mysql://user:password@host/database',
    projects=[production]
)
