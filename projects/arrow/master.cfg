# -*- python -*-
# ex: set filetype=python:

# Copyright 2019 RStudio, Inc.
# All rights reserved.
#
# Use of this source code is governed by a BSD 2-Clause
# license that can be found in the LICENSE_BSD file.

import os
from dotenv import load_dotenv
from buildbot.plugins import util

from ursabot.changes import ChangeFilter, GitPoller, GitHubPullrequestPoller
from ursabot.configs import ProjectConfig, MasterConfig
from ursabot.reporters import GitHubStatusPush, GitHubCommentPush
from ursabot.schedulers import AnyBranchScheduler, ForceScheduler
from ursabot.utils import any_of, has
from ursabot.workers import docker_workers_for

from arrow.docker import images
from arrow.commands import ursabot as ursabot_command
from arrow.formatters import (BenchmarkCommentFormatter,
                              CrossbowCommentFormatter)
from arrow.builders import (CrossbowTrigger, CppTest, CppCudaTest,
                            CppBenchmark, PythonTest, CppCondaTest,
                            PythonCondaTest, PythonCudaTest, JavaTest,
                            GoTest, RustTest, JSTest, RTest, RCondaTest)


load_dotenv()

########################## GLOBAL CONFIGURATIONS ##############################
# This configuration file can be loaded from another one, and the variables
# below can be injected from outside as module level locals (thus as globals).
global_or = globals().get

# project should be in `owner/repo` format, because of certain reporters
project = global_or('project', 'apache/arrow')
repo = global_or('repo', 'https://github.com/apache/arrow')

with_pollers = global_or('with_pollers', False)
with_reporters = global_or('with_reporters', False)

# Github token used for pushing status changes, have to provide repo:status
# scope for the token and must have write access to the arrow repository.
# Recommented scopes: public_repo, repo:status. Multiple tokens can be provided
# to increate the rate limit. By default 5000 API requests can be made with a
# single token, but the rotator will switch after reaching 1000 remaining rate
# limit.
poller_token = global_or('poller_token', None)
status_reporter_tokens = global_or('status_reporter_tokens', [])
comment_reporter_tokens = global_or('comment_reporter_tokens', [])

################################ WORKERS ######################################
# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password. The same
# worker name and password must be configured on the worker.

workers = global_or(
    'workers',
    docker_workers_for(archs=['amd64'], masterFQDN=os.getenv('MASTER_FQDN'))
)
cuda_enabled_workers = workers.filter(tags=has('cuda'))

################################ BUILDERS #####################################
# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which workers can execute them.  Note that any
# particular build will only take place on one worker.

arrow_benchmarks = CppBenchmark.builders_for(workers)
arrow_tests = (
    CppTest.builders_for(workers) +
    RTest.builders_for(workers) +
    PythonTest.builders_for(workers) +
    CppCondaTest.builders_for(workers) +
    RCondaTest.builders_for(workers) +
    PythonCondaTest.builders_for(workers) +
    CppCudaTest.builders_for(cuda_enabled_workers) +
    PythonCudaTest.builders_for(cuda_enabled_workers) +
    JavaTest.builders_for(workers) +
    RustTest.builders_for(workers) +
    GoTest.builders_for(workers) +
    JSTest.builders_for(workers)
)

arrow_builders = arrow_tests + arrow_benchmarks
crossbow_builders = CrossbowTrigger.builders_for(workers)
all_builders = arrow_builders + crossbow_builders

print('Enabled builders:')
for builder in all_builders:
    print(f' - {builder}')

################################ SCHEDULERS ###################################
# Configure the Schedulers, which decide how to react to incoming changes.
# For more see http://docs.buildbot.net/latest/full.html#scheduling-builds

schedulers = [
    AnyBranchScheduler(
        name='Arrow',
        change_filter=ChangeFilter(
            project=project,
            # see docstring of ursabot.hooks.GithubHook
            category=any_of(None, 'tag', 'pull'),
        ),
        treeStableTimer=None,
        builders=arrow_tests
    ),
    AnyBranchScheduler(
        name='ArrowBuild',
        change_filter=ChangeFilter(
            project=project,
            category='comment',
            properties={'command': 'build'}
        ),
        treeStableTimer=None,
        builders=arrow_tests
    ),
    AnyBranchScheduler(
        name='ArrowBenchmark',
        change_filter=ChangeFilter(
            # ensure that benchmarks are not triggered on every commit of every
            # pull request, see docstring of ursabot.hooks.GithubHook
            project=project,
            category='comment',
            properties={'command': 'benchmark'}
        ),
        treeStableTimer=None,
        builders=arrow_benchmarks
    ),
    AnyBranchScheduler(
        name='CrossbowTrigger',
        change_filter=ChangeFilter(
            # ensure that benchmarks are not triggered on every commit of every
            # pull request, see docstring of ursabot.hooks.GithubHook
            project=project,
            category='comment',
            properties={'command': 'crossbow'}
        ),
        treeStableTimer=None,
        builders=crossbow_builders
    ),
    # TODO(kszucs): specialize force scheduler, for example let the user
    # pass crossbow args for the crossbow-force scheduler
    ForceScheduler(
        name='ArrowForce',
        project=project,
        repository=repo,
        builders=all_builders
    )
]

################################ REPORTERS ####################################
# There are multiple ways to present build status to various places e.g.
# to github as status push, reviews and/or comments.

reporters = []
if with_reporters:
    reporters = [
        GitHubStatusPush(
            name='ArrowStatusPush',
            tokens=status_reporter_tokens,
            builders=arrow_builders,
            debug=False,
            verbose=True,
            verify=True
        ),
        GitHubCommentPush(
            name='BenchmarkCommentPush',
            tokens=comment_reporter_tokens,
            formatter=BenchmarkCommentFormatter(),
            builders=arrow_benchmarks,
            report_on={'failure', 'exception', 'cancelled', 'success'},
            debug=False,
            verbose=True,
            verify=True
        ),
        GitHubCommentPush(
            name='CrossbowCommentPush',
            tokens=comment_reporter_tokens,
            formatter=CrossbowCommentFormatter(
                crossbow_repo='ursa-labs/crossbow',
            ),
            builders=crossbow_builders,
            report_on={'failure', 'exception', 'cancelled', 'success'},
            debug=False,
            verbose=True,
            verify=True
        )
    ]
else:
    reporters = []

################################ POLLERS ####################################
# Git and Pull request pollers are required only if no hooks are defined.
# Pollers should be set up if the change hooks are not configured for the
# arrow repository.

if with_pollers:
    pollers = [
        GitPoller(
            project=project,
            repourl=repo,
            branch='master',
            pollInterval=180
        ),
        GitHubPullrequestPoller(
            project=project,
            branches=['master'],
            pollInterval=180,
            magic_link=True,
            token=util.Interpolate('%(secret:ursabot/github_token)s')
        )
    ]
else:
    pollers = []

################################ PROJECT CONFIG ###############################
# ProjectConfig is a thin layer around the project specific components.
# It lets other buildmaster configurations to reuse existing configurations,
# and it also makes possible to maintain the project relevant buildbot code
# in the project's own codebase.

commands = [
    ursabot_command
]

arrow = ProjectConfig(
    name=project,
    repo=repo,
    images=images,
    workers=workers,
    pollers=pollers,
    commands=commands,
    builders=all_builders,
    schedulers=schedulers,
    reporters=reporters
)

############################# BUILDMASTER CONFIG ##############################
# MasterConfig is the object that the ursabot pays attention to. The following
# master is only suitable for testing, the production configuration for
# (for ci.ursalabs.org) is maintained in a different master.cfg
# - `ursabot checkconfig` loads and validates it without actually
#   running the services
# - `ursabot start|stop|restart` also loads this dictionary, indirectly
#   through buildbot.tac

master = MasterConfig(
    # The 'title' string will appear at the top of this buildbot installation's
    # home pages (linked to the 'titleURL').
    title='Apache Arrow Testing',
    # The 'buildbotURL' string should point to the location where the
    # buildbot's internal web server is visible. This typically uses the port
    # number set in the 'webui_port' entry below, but with an
    # externally-visible host name which the buildbot cannot figure out without
    # some help.
    url='http://localhost:8100/',
    projects=[
        arrow
    ]
)
