# -*- python -*-
# ex: set filetype=python:

from ursabot.utils import has, Collection
from ursabot.schedulers import ForceScheduler
from ursabot.workers import DockerLatentWorker
from ursabot.configs import ProjectConfig, MasterConfig
from arrow.builders import (CrossbowTrigger, CppTest, CppCudaTest,
                            CppBenchmark, PythonTest, CppCondaTest,
                            PythonCondaTest, PythonCudaTest, JavaTest,
                            GoTest, RustTest, JSTest, RTest, RCondaTest)


name = 'apache/arrow'
repo = 'https://github.com/apache/arrow'

################################ WORKERS ######################################
# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password. The same
# worker name and password must be configured on the worker.

workers = Collection([
    DockerLatentWorker(
        'local-docker',
        arch='amd64',
        docker_host='unix://var/run/docker.sock',
        masterFQDN='host.docker.internal',  # only required for OSX
    ),
    # DockerLatentWorker(
    #     'local-cuda-docker',
    #     tags=['cuda'],
    #     arch='amd64',
    #     docker_host='unix://var/run/docker.sock',
    #     masterFQDN='host.docker.internal',  # only required for OSX
    # )
    # DockerLatentWorker(
    #     'local-arm-docker',
    #     tags=['cuda'],
    #     arch='arm64v8',
    #     docker_host='unix://var/run/docker.sock',
    #     masterFQDN='host.docker.internal',  # only required for OSX
    # )
])

cuda_enabled_workers = workers.filter(tags=has('cuda'))

################################ BUILDERS #####################################
# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which workers can execute them.  Note that any
# particular build will only take place on one worker.

arrow_benchmarks = CppBenchmark.builders_for(workers)
arrow_tests = (
    CppTest.builders_for(workers) +
    RTest.builders_for(workers) +
    PythonTest.builders_for(workers) +
    CppCondaTest.builders_for(workers) +
    RCondaTest.builders_for(workers) +
    PythonCondaTest.builders_for(workers) +
    CppCudaTest.builders_for(cuda_enabled_workers) +
    PythonCudaTest.builders_for(cuda_enabled_workers) +
    JavaTest.builders_for(workers) +
    RustTest.builders_for(workers) +
    GoTest.builders_for(workers) +
    JSTest.builders_for(workers)
)

arrow_builders = arrow_tests + arrow_benchmarks
crossbow_builders = CrossbowTrigger.builders_for(workers)
all_builders = arrow_builders + crossbow_builders

################################ SCHEDULERS ###################################
# Configure the Schedulers, which decide how to react to incoming changes.

schedulers = [
    # TODO(kszucs): specialize force scheduler, for example let the user
    # pass crossbow args for the crossbow-force scheduler
    ForceScheduler(
        name='ArrowForce',
        project=name,
        repository=repo,
        builders=all_builders
    )
]

################################ ADD PROJECTS #################################

testing = ProjectConfig(
    # pass images
    name=name,
    workers=workers,
    builders=all_builders,
    schedulers=schedulers
)

BuildmasterConfig = MasterConfig(
    title='Arrow Testing',
    url='http://localhost:4100/',
    webui_port=4100,
    worker_port=9989,
    database_url='sqlite:///ursabot.sqlite',
    projects=[testing]
)
