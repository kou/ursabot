# -*- python -*-
# ex: set filetype=python:

# Copyright 2019 RStudio, Inc.
# All rights reserved.
#
# Use of this source code is governed by a BSD 2-Clause
# license that can be found in the LICENSE_BSD file.

import os
from pathlib import Path

from buildbot.plugins import util

from ursabot.hooks import UrsabotHook
from ursabot.utils import Config
from ursabot.secrets import SecretInPass
from ursabot.configs import ProjectConfig, MasterConfig, load_variable


########################### LOAD STATIC CONFIG ################################
# Read ursabot configuration from .toml files, export URSABOT_ENV='test' to use
# test environment. These configurations are merged upon each other, the
# merging order is default.toml <- $env.toml <- local.toml <-.secrets.toml
# The schema of the configuration files are flexible. `conf` is only used by
# this master.cfg file, so it can be freely changed.
# For more see https://github.com/ursa-labs/ursabot#configuring-ursabot

env = os.environ.get('URSABOT_ENV', 'test')
print(f'Loading environment: {env}')

conf = Config.load('default.yaml', f'{env}.yaml',
                   optionals=['local.yaml', '.secrets.yaml'])

############################## AUTHENTICATION ################################

auth, authz = None, None
if conf.auth.enabled:
    auth = util.GitHubAuth(
        clientId=util.Interpolate(conf.auth.github.client_id),
        clientSecret=util.Interpolate(conf.auth.github.client_secret),
        apiVersion=4,
        getTeamsMembership=True
    )
    authz = util.Authz(
        # 'admin' organization is unavalable on github so it is used to grant
        # access for specific users outside of allowed organizations
        allowRules=[
            util.AnyControlEndpointMatcher(role=org)
            for org in conf.auth.roles.admin.orgs + ['admin']
        ],
        roleMatchers=[
            # github organization names becomes the roles assigned to the user
            util.RolesFromGroups(),
            # explicitly assign admin role to specific users
            util.RolesFromUsername(
                roles=['admin'],
                usernames=conf.auth.roles.admin.users
            )
        ]
    )

############################## CHANGE HOOK ####################################
# Accept HTTP requests and translate them into changes for buildbot. We use a
# specialized hook which also processes the pull request comments.

change_hook = None
if conf.hooks.github.enabled:
    change_hook = UrsabotHook(
        secret=util.Interpolate(conf.hooks.github.secret),
        tokens=[
            util.Interpolate(token) for token in conf.hooks.github.tokens
        ],
        debug=conf.hooks.github.debug,
        strict=True,
        verify=True
    )

############################## SECRET PROVIDERS ###############################

secret_providers = []
if conf.secrets.enabled:
    secret_providers.append(
        SecretInPass(
            # passphrase should be set either in local.yaml or .secrets.yaml
            # without the interpolate syntax
            passphrase=conf.secrets.get('passphrase'),
            dirname=Path(conf.secrets.directory).expanduser()
        )
    )

############################### PROJECTS ######################################

projects = []
for name, proj in conf.projects.items():
    if proj.enabled:
        _, project = load_variable(proj.config, variable=proj.variable)
        assert isinstance(project, ProjectConfig)
        projects.append(project)

############################# BUILDMASTER CONFIG ##############################
# `BuildmasterConfig` isthe dictionary that the buildbot buildmaster pays
# attention to.
# - `buildbot checkconfig master.cfg` loads and validates it without actually
#   running the services
# - `buildbot start|stop|restart .` also loads this dictionary, indirectly
#   through buildbot.tac

BuildmasterConfig = MasterConfig(
    title=conf.title,
    url=conf.url,
    auth=auth,
    authz=authz,
    webui_port=conf.webui_port,
    worker_port=conf.worker_port,
    database_url=conf.database_url,
    change_hook=change_hook,
    secret_providers=secret_providers,
    projects=projects
)
